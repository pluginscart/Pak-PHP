<?php

namespace Framework\Presentation;
use Framework\ApplicationConfiguration\ApplicationConfiguration as ApplicationConfiguration;

/**
 * Base presentation class for browser based applications
 * 
 * Abstract singleton class. must be inherited by a child class
 * Provides base functions for application presentation classes
 * 
 * @category   Framework
 * @package    Presentation
 * @author     Nadir Latif <nadir@pakjiddat.com>
 * @license    https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License, version 2
 * @version    1.0.0
 * @link       N.A
 */
abstract class ApplicationPresentation
{
    /**
     * The single static instance
     */
    protected static $instance;
    /**
     * Class constructor
     * Used to prevent creating an object of this class outside of the class using new operator
     * 
     * Used to implement Singleton class
     * 
     * @since 1.0.0		  
     */
    protected function __construct()
    {
        
    }
    /**
     * Used to call a function of the presentation class that generates the template parameters
     * For the given url and tag name
     * 
     * It fetches the presentation object from application configuration
     * It then calls the function of the presentation object and returns the response
     * The name of the function is generated by removing the file extension
     * And replacing '_' with space and then changing first letter of each word to capital
     * After that the spaces are removed
     * 
     * @since 1.0.0
     * @param string $option the url option
     * @param string $tag_name the name of the tag for which the parameters need to be generated
     * 
     * @return array $template_parameters it is an array that contains template parameters	 
     */
    public function GetTemplateParameters($option, $tag_name)
    {        
        $template_parameters = array();
        
        /** The presentation object is fetched from application configuration **/
        $presentation_object = ApplicationConfiguration::GetComponent('presentation');
        
        $function_name_suffix = ucwords(str_replace("_", " ", $option));
        $function_name_suffix = str_replace(" ", "", $function_name_suffix);
        
        $function_name                = substr($tag_name, 0, strrpos($tag_name, "."));
        $function_name                = ucwords(str_replace("_", " ", $function_name));
        $function_name                = str_replace(" ", "", $function_name);
        $function_name                = "Get" . $function_name . "ParametersFor" . $function_name_suffix;
        /** The template parameters callback is defined **/
        $template_parameters_callback = array(
            $presentation_object,
            $function_name
        );
        /** If the callback exists then it is called. Otherwise an exception is thrown **/
        if (is_callable($template_parameters_callback))
            $template_parameters = call_user_func($template_parameters_callback);
        else
            throw new \Exception("Please define the function: " . $function_name . " in the application presentation class", 120);
        
        return $template_parameters;       
    }
    /**
     * Used to return a single instance of the class
     * 
     * Checks if instance already exists
     * If it does not exist then it is created
     * The instance is returned
     * 
     * @since 1.0.0
     * @return ApplicationPresentation static::$instance name the instance of the correct child class is returned 
     */
    public static function GetInstance()
    {        
        if (static::$instance == null) {
            static::$instance = new static();
        }
        return static::$instance;        
    }
}